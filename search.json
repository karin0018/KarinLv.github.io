[{"title":"MySQL 安装教程 + 排坑","url":"/2021/01/27/mysql-install/","content":"**本教程基于 windows10(64位) 操作系统**\n\n# 下载\n\n1. 访问 [官网下载地址](https://dev.mysql.com/downloads/mysql/)\n   {% asset_img 1.PNG This is an download image %}\n\n2. 点击 `No thanks,just start my download` 跳过注册过程，直接下载压缩包。\n\n<!--more-->\n# 安装与配置\n\n- 在指定路径解压，将解压后 bin 文件的路径（`D:\\mysql-8.0.23-winx64\\bin`）添加到系统环境变量中：\n  > 我的电脑->属性->高级->环境变量\n  > 选择PATH,在其后面添加: 你的 mysql bin 文件夹的路径\n- 使用管理员身份打开 cmd：\n  > 在开始菜单中输入 cmd，选择用管理员身份打开；\n- 跳转到 mysql bin 目录下：\n  {% asset_img 2.PNG This is an bin path %}\n- 安装 mysql\n  ```\n  mysqld -install\n  ```\n- 初始化 mysql（一定要初始化！否则容易导致启动不成功）\n  ```\n  mysqld --initialize\n  ```\n- 启动服务\n  ```\n  net start mysql\n  ```\n  {% asset_img 3.PNG This is an start successfully image %}\n\n  > 这里直接写 mysql 是因为我主机服务中 mysql 的服务名就是 mysql，如果大家出现了启动不成功的情况可以自行搜索是不是服务名不同。\n\n- 登录 mysql：\n  ```\n  mysql -u root -p\n  ```\n  据说第一次登录不需要密码，直接按回车就好了，但是博主按了回车发现不行。出现报错 `ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)`\n  {% asset_img 4.PNG This is an start failed image %}\n  看来还是需要我们输入密码，下面一起找密码吧：\n  1. 打开 mysql 的根目录下名为 data 的文件夹；\n  2. 找到以 `.err` 为结尾的文件（专门记录报错信息的）并打开；\n  3. 找到自动生成的密码啦！\n   {% asset_img 5.PNG This is an password image %}\n  4. 输入密码即可~\n   {% asset_img 6.PNG This is an load successfully image %}\n\n# 通过 vscode 连接 mysql\n\n旨在利用 vscode 能更加便捷的编写并执行 SQL 代码。\n\n参考文章：[MySQL vscode开发环境搭建](https://zhuanlan.zhihu.com/p/347159257)\n\n## 基础知识\n\n> MySQL 相当于一个 shell，SQL 就是和 shell 交互的脚本语言。\n> 众所周知，与 shell 打交道的方式有两种：\n> - 一种是直接在shell中输命令执行，但是这样很难让我们看到多条shell的作用。\n> - 还有一种方式是编写 shell 脚本。在 bash 中，shell 脚本的文件名后缀可以是 .sh，在 MySQL 中，脚本的后缀名为 .sql\n\n## 安装插件\n\n1. 打开 vscode 插件商店；\n2. 搜索并安装如下两个插件：\n   - MySQL [by Jun Han]\n   - MySQL Syntax [by Jake Bathman]\n3. 以管理员身份打开 cmd；\n4. `net start mysql` 启动服务；\n5. `mysql -u root -p` 进入 MySQL 账户（密码的查找方式见上）\n6. 进入 mysql 的 shell 之后，输入命令：\n   ```\n    alter user 'root'@'localhost' identified with mysql_native_password by '123456';\n   ```\n   重置密码为 `123456`\n\n## vscode 连接本机数据库\n\n1. 打开 vscode ，点击左下角的 MYSQL 旁边的加号：\n   {% asset_img 7.PNG This is an load successfully image %}\n\n2. 在弹出的对话框中设置参数：\n   - host: 127.0.0.1\n   - username: root\n   - password: 123456 (刚设置的)\n   - 其他参数保持默认，一路回车下去\n\n## 一个栗子\n\n1. 在 MYSQL 下方的蓝色饼饼图标处右键，选择 new_query\n2. 在弹出的编辑栏中输入 SQL 指令，并以 `.sql` 为后缀名保存到本地\n3. 编辑区右键，选择 Run MySQL query\n4. 你会在编辑区右侧看到指令的执行结果。\n\n\n","tags":["mysql"],"categories":["教程类"]},{"title":"hexo+stun 博客搭建","url":"/2021/01/26/hexo-stun/","content":"\n# 背景\n\n看到某位同学搭了自己的博客，觉得有一个记录自己成长路线的博客好像挺香的…刚好寒假时间比较充裕，是个动手的好时机~\n\nGithub Pages 功能 +  Hexo 的博客框架 + 自己喜欢的主题 = 华而有实的博客\n\n<!--more-->\n\n使用 Github Pages 搭建博客的好处：\n\n1. 免费，免费，免费！\n2. 都是静态文件，访问速度较优；\n3. 能和 git 搭配使用，管理起来都是熟悉的配方；\n\n使用 hexo 的好处：\n\n1. 简洁高效，安装简单；\n2. 有多种稳定、美观的主题可以挑选；\n3. 使用 Markdown 解析文章，符合自己平时写东西的习惯；\n\n> 当然其他框架也有各自的优点，这个选择凭各自喜好啦~\n\n**本教程以 windows 为例**\n\n\n# Github Pages\n\n**基于 [Github Pages 官方文档](https://docs.github.com/cn/github/working-with-github-pages/creating-a-github-pages-site)**\n\n前提是要有 github 账号，没有的同学们可以先去注册一个~\n\n1. 创建 Github Pages 站点：\n\n    - 新建一个仓库；\n    - 输入仓库的名称和说明（可选）。 如果您创建的是用户或组织站点，仓库名称**必须为** `<user>.github.io` 或 `<organization>.github.io` ；\n    - 设置仓库属性为 `public` ;\n    - 选择 `Initialize this repository with a README`（使用 readme 文件初始化此仓库；\n    - `create repository`\n\n2. 设置站点：\n\n    - 在站点仓库下，找到右上角 `Settings`\n\n    - 下滑，找到`Github Pages`选项卡，你能看到站点的 url 啦~\n        {% asset_img 1-1.jpg This is an github-pages image %}\n        > 这个 url 就是你网站的地址，通过它，大家就能访问到你的博客。\n\n    - Source 栏的 branch 选择 main（或者 master，总之就是除了 none 之外的那个），点击 save；\n\n    - Theme Chooser 那个不用管，因为后续要使用 hexo 的主题嘛；\n\n    - 将仓库克隆到本地，用 git 配置自己的身份信息：\n\n        ```\n        git config --global user.name \"github user name\"\n        git config --global user.email \"github user email\"\n        ```\n\n    - [添加 ssh-key](https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416)（注意不要设置密码）主要是为了以后 hexo 发布比较方便。\n\n\n\n# hexo\n\n**基于 [hexo](https://hexo.io/zh-cn/docs/) 官方文档**\n\n## 安装\n\n安装 hexo 之前，先来把环境搞好：\n\n- 安装 [Node.js](http://nodejs.org/) (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)\n- 安装 Git （ 不过 github 那一步都搞好了，这里就不用了吧~）\n\n> 这里具体的安装细节提示可以直接参考各自官方文档，或者网上找找教程。\n\n现在可以安装 hexo。\n\n在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在`D:/blog`目录下。\n\n我使用 Windows 自带的控制台定位到`D:/blog`目录下执行以下操作：\n\n```\n$npm install -g hexo-cli\n```\n\n> 据说 linux 和 max 里是要在前面加个 sudo，不然会因为权限问题报错。\n\n装完输入 `hexo --version` 检查是否安装成功。\n\n## 建站\n\n`hexo init` 初始化文件夹；\n\n`npm install` 安装必须的插件；\n\n`hexo g` 生成静态文件；\n\n`hexo s` 将静态文件运行在本地服务器上，这个时候根据提示打开 `localhost:4000` 就能看到最基本的博客啦~\n\n`ctrl+c` 关闭本地服务器；\n\n## 与 github 连接\n\n打开 blog 根目录下的 `_config.yml` 文件，修改配置：\n\n```yml\n# URL\n## If your site is put in a subdirectory, set url as 'http://example.com/child' and root as '/child/'\nurl: https://github.com/xxx/xxx.github.io/\nroot: /xxx.github.io/\npermalink: :year/:month/:day/:title/\npermalink_defaults:\npretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from\n\n...\n\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: git\n  repo: git@github.com:xxx/xxx.github.io.git\n  branch: main\n```\n\n还是在 blog 根目录下：\n\n```c\nhexo g // 编译生成静态文件（每次修改完都必须重新编译）\nhexo d // 将博客发布到 github 上\n```\n\n现在可以通过 `https://xxx.github.io` 来访问你的博客啦~\n\n\n\n# 主题 - stun\n\n博主选的是 stun 这个主题，主要是看中了她 ~~可甜可盐~~  活泼大方、简洁美观 的风格，当然她不是最简洁的，最简洁的应该是 Next 这个主题了吧（\n\n这个官方文档超级全的！！！而且步骤都很详细！！！\n\n我在这里就不瞎写了，反正写的没有官网好，照着来没错的，嗯！\n\n官网指路：[stun](https://theme-stun.github.io/docs/zh-CN/guide/quick-start.html#%E5%AE%89%E8%A3%85)\n\n\nemmmm\n\n那我写点推荐和排雷：\n\n## 统计与分析推荐\n\n首推 [谷歌分析](https://theme-stun.github.io/docs/zh-CN/advanced/third-part.html#%E8%B0%B7%E6%AD%8C%E5%88%86%E6%9E%90) ！！！ 简单好用不要钱！！！\n\n来一篇好用的配置教程：[Google Analytics怎么用，谷歌分析工具使用教程](https://www.yundianseo.com/how-to-use-google-analytics/)\n\n\n\n## 评论系统推荐\n\n博主尝试了三种评论系统，各自利弊写在下面奥：\n\n1. Disqus\n\n    优点：\n\n    - 配置简单（所以博主最先选的就是这个）\n    - 完善的后台管理机制\n    - 丰富的表情可选\n    - 支持 markdown\n\n    缺点：\n\n    - 服务器在国外，不翻墙加载不出来\n\n    - 存在广告植入\n\n    - 要评论必须有 disqus  / google / Twitter/ facebook 账户\n\n\n\n2. Valine\n\n    优点：\n\n    - 配置简单（但没有 disqus 简单）\n    - 无后端，所以加载起来很快\n    - 页面设计简洁\n    - 评论不用登陆任何账户\n    - 支持 markdown\n\n    缺点：\n\n    - 页面设计过于简洁（我试验过之后才发现，是真的很简洁，白白的，也没有点赞的功能，想要拥有一个头像都要花挺多功夫\n    - 评论可以匿名（某同学说可能会有恶意评论，博主觉得他说的有道理…\n\n\n\n3. Utterances\n\n    优点：\n\n    - 配置看上去复杂但其实很简单：\n\n        将 [utterances app (opens new window)](https://github.com/apps/utterances)安装在你博客对应的 Github 仓库中。然后，按照 stun 官网的提示修改配置项即可；\n\n    - 是一个基于 github issues 的评论系统，管理方便；\n\n    - 支持 emoji 支持评论点赞\n\n    - 支持 markdown\n\n    缺点：\n\n    - 需要登录 github 账户才能评论（是缺点也是优点吧）\n\n## bug 分享\n\n### multiline key\n\n```\n message: 'can not read a block mapping entry; a multiline key may not be an implicit key at line 7, column 9:\\n'\n \"    subtitle: 'If you shed tears when you mi ... \\n\" +\n```\n\n网上大部分说是在对应位置缺了英文空格，但我不是这个错…\n\n这里要注意，错误可能不在这一行，可能出现在它前一行：\n\n```yml\ntitle: 'Karin Lv's Blog'\nsubtitle: 'If you shed tears...\n```\n\n我就是出现在它上一行的，这里单引号中间还有一个单引号，不符合语法规则了，所以报错…\n\n去掉外层的单引号就好了！\n\n### invalid characters\n\n出现非法字符，大概率是因为在配置文件里写了中文，但没有相应的设置。\n\n博主的做法比较简单粗暴：配置文件里尽量不写中文，都改成英文 QAQ\n\n> 大家可以在网上搜一下更专业的解决办法，不要学这个懒博主（\n\n","tags":["博客搭建"],"categories":["教程类"]},{"title":"计算机网络复习 - 网络层","url":"/2021/01/26/ComputerNetworkReview-Chap4/","content":"\n# 综述\n\n通过学习这一章节，我们需要了解以下两方面内容：\n\n理解网络层服务原理：\n- 网络层服务模型\n- 网络层上的重要功能：转发和选路\n- 路由器工作原理\n- 选路算法\n\n因特网的网络层协议：\n- IP 协议\n- ICMP 协议\n- 选路协议：RIP,OSPF,BGP\n<!--more-->\n\n#  概念简介\n\n1. 网络层的**作用**：将报文段从**发送主机**传送到**接收主机**。\n\n> 每一台主机和路由器都运行网络层协议。\n>\n> 路由器：将分组从输入链路转发到输出链路。它运行的协议包括，网络层，链路层，物理层。\n>\n> 发送主机：将传输层报文段封装到网络层分组中，发送给边缘路由器。\n>\n> 接收主机：从边缘路由器接收分组，取出报文段交付给传输层。\n\n2. 网络层的主要功能：\n\n    选路：确定分组从源路由器到目的路由器的路径 – 利用各种**路由算法**来计算转发表。\n\n    转发：将分组从输入端口转移到合适的输出端口 – 根据转发表转运分组。\n\n    > 在传输分组之前，两个端系统需要建立连接。\n    >\n    > - 传输层连接：进程-进程，连接状态仅仅保存在端系统中，传输层服务在网络边缘实现\n    > - 网络层连接：主机-主机，连接状态保存在源主机，目的主机以及所有中间路由器上（路由器要保存转发表的嘛），网络层服务在网络核心实现。\n\n3. 网络服务模型\n\n    定义分组在发送主机与接收主机之间传输时的特性。\n\n    - 对单个分组提供的服务\n\n        >  保证交付；具有时延上界的保证交付；\n\n    - 对分组流提供的服务\n\n        > 有序交付；保证最小带宽；\n        > 保证最大时延抖动（分组端到端时延的最大差异）；\n\n        不同架构的网络提供的网络层服务可能不同，同一个网络也可以提供不同的网络层服务。\n\n# 虚电路和数据报网络\n\n两种基本的网络类型：\n\n**数据报网络**：提供网络层**无连接**服务\n\n**虚电路网络**：提供网络层**面向连接**服务\n\n## 虚电路 Virtual circuits\n\n网络层连接成为虚电路。\n\n虚电路是从源主机到目的主机的一条路径，类似电话电路，每条虚电路有唯一标识（虚电路号），每个分组应该携带虚电路号，表明所属的虚电路。\n\n> 传输**分组前建立虚电路**，传输结束后拆除虚电路;\n>\n> 每个路由器为经过它的虚电路维护状态（转发表项 - 进入端口，进入VC号，输出端口，输出VC号），分组携带 VC 号，每一次转发前用新的 VC 号替换分组中的 VC 号 ;\n>\n> 链路及路由器资源（带宽、缓存等）可以分配给虚电路，从而虚电路能提供**可预期的**网络服务。\n\n**信令协议：**用于 VC  的建立、维护与拆除。\n\n## 数据报网络\n\n- 分组携带目的主机地址，路由器按目的地址转发分组；\n\n- 路由器根据分组的目的地址转发分组，转发表记录目的地址到输出链路的映射；\n\n    > 实际上是存储**目的地址的范围**到**链路**的映射；\n    >\n    > 匹配规则：最长前缀匹配优先；\n\n- 转发表被选路模块修改，约1～5分钟更新一次；\n\n- 同一对主机之间传输的分组可能走不同的路径，从而可能重排序；\n\n## 数据报网络 VS 虚电路网络\n\n数据报网络：\n\n- 计算机之间交换数据：没有严格的时序要求；\n- 终端具有智能：将复杂的工作（如差错控制）推到网络边缘，以保持网络简单。\n\n虚电路网络：\n\n- 由电信网发展而来：严格时序和可靠性要求；\n- 终端无智能或很少智能：复杂工作由网络完成，以保持终端简单。\n\n... 待更新","tags":["计算机网络"],"categories":["复习笔记"]}]